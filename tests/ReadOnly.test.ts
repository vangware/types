import type { ReadOnly } from "../src/ReadOnly.js";

const record: ReadOnly<Record<"游릭", ["游릭"]>> = { "游릭": ["游릭"] };

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements
record["游릭"] = "游릴";

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements
record["游릭"][0] = "游릴";

// @ts-expect-error Mutations methods not allowed.
// eslint-disable-next-line @typescript-eslint/no-unsafe-call, functional/no-expression-statements
record["游릭"][0].pop();

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements
record.wrong = "游릴";

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements
delete record["游릭"];

const array: ReadOnly<["游릭"]> = ["游릭"];

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements
array[0] = "游릴";

// @ts-expect-error Mutations methods not allowed.
// eslint-disable-next-line @typescript-eslint/no-unsafe-call, functional/no-expression-statements
array[0].pop();

const map: ReadOnly<Map<"游릭", ["游릭"]>> = new Map([["游릭", ["游릭"]]]);

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements, @typescript-eslint/no-unsafe-call
map.set("游릭", ["游릴"]);

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements
map.forEach(value => (value[0] = "游릴"));

const set: ReadOnly<Set<["游릭"]>> = new Set([["游릭"]]);

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements, @typescript-eslint/no-unsafe-call
set.add("游릴");

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements, @typescript-eslint/no-unsafe-call
set.delete("游릭");

// @ts-expect-error Mutations not allowed
// eslint-disable-next-line functional/immutable-data, functional/no-expression-statements
set.forEach(value => (value[0] = "游릴"));

// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
const aFunction = (_foo: string, _bar: { foo: string }) => _bar;

type ReadOnlyFunction = ReadOnly<typeof aFunction>;
